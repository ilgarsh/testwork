/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.46
 * Generated at: 2017-10-03 12:49:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <script src=\"jquery-3.2.1.min.js\"></script>\r\n");
      out.write("    <script src=\"jQuery-contextMenu/dist/jquery.contextMenu.min.js\"></script>\r\n");
      out.write("    <script src=\"jQuery-contextMenu/dist/jquery.ui.position.min.js\"></script>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"jQuery-contextMenu/dist/jquery.contextMenu.min.css\"/>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"style1.css\">\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Task Two</title>\r\n");
      out.write("    <script>\r\n");
      out.write("        var selectedDiv;\r\n");
      out.write("        $(function() {\r\n");
      out.write("            $.contextMenu({\r\n");
      out.write("                selector: '.directory',\r\n");
      out.write("                callback: function(key, options) {\r\n");
      out.write("                    var div_name;\r\n");
      out.write("                    switch (key) {\r\n");
      out.write("                        case \"add\":\r\n");
      out.write("                            div_name = prompt(\"Please enter directory name\");\r\n");
      out.write("                            $.post(\"\",\r\n");
      out.write("                                {\r\n");
      out.write("                                    command: key,\r\n");
      out.write("                                    div_id: options.$trigger.attr(\"id\"),\r\n");
      out.write("                                    div_name: div_name\r\n");
      out.write("                                }, function (response) {\r\n");
      out.write("                                    var parent = options.$trigger[0].classList;\r\n");
      out.write("                                    if (parent.contains('open')) {\r\n");
      out.write("                                        createDirectory(document.getElementById(response.parent),\r\n");
      out.write("                                            response);\r\n");
      out.write("                                    }\r\n");
      out.write("                                });\r\n");
      out.write("                            break;\r\n");
      out.write("                        case \"edit\":\r\n");
      out.write("                            div_name = prompt(\"Please enter new directory name\");\r\n");
      out.write("                            $.post(\"\",\r\n");
      out.write("                                {\r\n");
      out.write("                                    command: key,\r\n");
      out.write("                                    div_id: options.$trigger.attr(\"id\"),\r\n");
      out.write("                                    div_name: div_name,\r\n");
      out.write("                                    success: function () {\r\n");
      out.write("                                        changeDirectory(options.$trigger.attr(\"id\"), div_name);\r\n");
      out.write("                                    }\r\n");
      out.write("                                });\r\n");
      out.write("                            break;\r\n");
      out.write("                        case \"copy\":\r\n");
      out.write("                            $.post(\"\",\r\n");
      out.write("                                {\r\n");
      out.write("                                    command: key,\r\n");
      out.write("                                    div_id: options.$trigger.attr(\"id\")\r\n");
      out.write("                                });\r\n");
      out.write("                            break;\r\n");
      out.write("                        case \"paste\":\r\n");
      out.write("                            $.post(\"\",\r\n");
      out.write("                                {\r\n");
      out.write("                                    command: key,\r\n");
      out.write("                                    div_id: options.$trigger.attr(\"id\")\r\n");
      out.write("                                }, function (response) {\r\n");
      out.write("                                    var parent_id = document.getElementById(options.$trigger.attr(\"id\"));\r\n");
      out.write("                                    for (var i = 0; i < response.childs.length; i++) {\r\n");
      out.write("                                        if (!document.getElementById(response.childs[i].id)) {\r\n");
      out.write("                                            createDirectory(parent_id,\r\n");
      out.write("                                                response.childs[i]);\r\n");
      out.write("                                        }\r\n");
      out.write("                                    }\r\n");
      out.write("                                });\r\n");
      out.write("                            break;\r\n");
      out.write("                        case \"delete\":\r\n");
      out.write("                            $.post(\"\",\r\n");
      out.write("                                {\r\n");
      out.write("                                    command: key,\r\n");
      out.write("                                    div_id: options.$trigger.attr(\"id\"),\r\n");
      out.write("                                    success: function () {\r\n");
      out.write("                                        deleteDirectory(options.$trigger.attr(\"id\"));\r\n");
      out.write("                                    }\r\n");
      out.write("                                }\r\n");
      out.write("                            )\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                items: {\r\n");
      out.write("                    \"add\": {name: \"Add\", icon: \"add\"},\r\n");
      out.write("                    \"edit\": {name: \"Edit\", icon: \"edit\"},\r\n");
      out.write("                    \"copy\": {name: \"Copy\", icon: \"copy\"},\r\n");
      out.write("                    \"paste\": {name: \"Paste\", icon: \"paste\"},\r\n");
      out.write("                    \"delete\": {name: \"Delete\", icon: \"delete\"}\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(document).on('click', '.directory', function(e){\r\n");
      out.write("                $.post(\"\", {\r\n");
      out.write("                    command: \"show_child\",\r\n");
      out.write("                    div_id: this.id,\r\n");
      out.write("                    success: function () {\r\n");
      out.write("                        var div = e.currentTarget;\r\n");
      out.write("                        div.classList.add('open');\r\n");
      out.write("                        if (!selectDiv(e)) {\r\n");
      out.write("                            openFolderAnimation(div);\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                }, function (response) {\r\n");
      out.write("                    var parent = document.getElementById(response.id);\r\n");
      out.write("                    removeOpenFolderAnimation(parent);\r\n");
      out.write("                    for (var i = 0; i < response.childs.length; i++) {\r\n");
      out.write("                        if (!document.getElementById(response.childs[i].id)) {\r\n");
      out.write("                            createDirectory(parent,\r\n");
      out.write("                                response.childs[i]);\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        function openFolderAnimation(div) {\r\n");
      out.write("            var icon_div;\r\n");
      out.write("            console.log(div.childNodes);\r\n");
      out.write("            if (div.childNodes) {\r\n");
      out.write("                for (var i = 0; i < div.childNodes.length; i++) {\r\n");
      out.write("                    var child = div.childNodes;\r\n");
      out.write("                    if (child[i].classList && child[i].classList.contains('directory_icon')) {\r\n");
      out.write("                        icon_div = div.childNodes[i];\r\n");
      out.write("                        icon_div.classList.remove('directory_icon');\r\n");
      out.write("                        icon_div.classList.add('loader');\r\n");
      out.write("                        break;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function removeOpenFolderAnimation(div) {\r\n");
      out.write("            var icon_div;\r\n");
      out.write("            console.log(div.childNodes);\r\n");
      out.write("            if (div.childNodes) {\r\n");
      out.write("                for (var i = 0; i < div.childNodes.length; i++) {\r\n");
      out.write("                    var child = div.childNodes;\r\n");
      out.write("                    if (child[i].classList && child[i].classList.contains('loader')) {\r\n");
      out.write("                        icon_div = div.childNodes[i];\r\n");
      out.write("                        icon_div.classList.remove('loader');\r\n");
      out.write("                        icon_div.classList.add('directory_icon');\r\n");
      out.write("                        break;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function selectDiv(e) {\r\n");
      out.write("            var isLoaded = false;\r\n");
      out.write("            e.stopPropagation();\r\n");
      out.write("            if (selectedDiv && selectedDiv.classList.contains('selected')) {\r\n");
      out.write("                selectedDiv.classList.remove('selected');\r\n");
      out.write("            }\r\n");
      out.write("            selectedDiv = e.currentTarget;\r\n");
      out.write("            selectedDiv.classList.add('selected');\r\n");
      out.write("            for (var i = 0; i < selectedDiv.childNodes.length; i++) {\r\n");
      out.write("                if (selectedDiv.childNodes[i].classList !== undefined) {\r\n");
      out.write("                    if (selectedDiv.childNodes[i].classList.contains('show')) {\r\n");
      out.write("                        isLoaded = true;\r\n");
      out.write("                        selectedDiv.childNodes[i].classList.remove('show');\r\n");
      out.write("                        selectedDiv.childNodes[i].classList.add('hide');\r\n");
      out.write("                    } else if (selectedDiv.childNodes[i].classList.contains('hide')) {\r\n");
      out.write("                        isLoaded = true;\r\n");
      out.write("                        selectedDiv.childNodes[i].classList.remove('hide');\r\n");
      out.write("                        selectedDiv.childNodes[i].classList.add('show');\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            return isLoaded;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //---------CREATE, DELETE, MOVE AND CHANGE DIRECTORY-----------//\r\n");
      out.write("        function createDirectory(parent, directory) {\r\n");
      out.write("            var mainDiv = document.createElement(\"div\");\r\n");
      out.write("            mainDiv.classList.add(\"directory\");\r\n");
      out.write("            var sibling = $(parent).find(\".directory\")[0];\r\n");
      out.write("            var isHide;\r\n");
      out.write("            if (sibling !== undefined) {\r\n");
      out.write("                isHide = sibling.classList.contains('hide');\r\n");
      out.write("            }\r\n");
      out.write("            if (isHide) {\r\n");
      out.write("                mainDiv.classList.add(\"hide\");\r\n");
      out.write("            } else {\r\n");
      out.write("                mainDiv.classList.add(\"show\");\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            var nameDiv = document.createElement(\"div\");\r\n");
      out.write("            nameDiv.classList.add(\"directory_name\");\r\n");
      out.write("            nameDiv.innerText = directory.name;\r\n");
      out.write("\r\n");
      out.write("            var iconDiv = document.createElement(\"div\");\r\n");
      out.write("            iconDiv.classList.add(\"directory_icon\");\r\n");
      out.write("\r\n");
      out.write("            mainDiv.id = directory.id;\r\n");
      out.write("\r\n");
      out.write("            mainDiv.appendChild(iconDiv);\r\n");
      out.write("            mainDiv.appendChild(nameDiv);\r\n");
      out.write("            parent.appendChild(mainDiv);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function deleteDirectory(id) {\r\n");
      out.write("            //send child to tomcat\r\n");
      out.write("            //tomcat deletes child and all child's child\r\n");
      out.write("            var element = document.getElementById(id);\r\n");
      out.write("            element.parentNode.removeChild(element);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function changeDirectory(id, directory) {\r\n");
      out.write("            $(\"#\"+id ).find(\".directory_name\")[0].innerText = directory;\r\n");
      out.write("        }\r\n");
      out.write("        //------------------------------------------------------------//\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"directory\" id=\"0\">\r\n");
      out.write("    <div class=\"directory_icon\"></div>\r\n");
      out.write("    <div class=\"directory_name\">Root</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
